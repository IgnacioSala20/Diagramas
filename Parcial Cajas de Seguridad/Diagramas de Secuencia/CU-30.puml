@startuml
autonumber

actor "__:ResponsableAdministrativo__" as RA 
boundary "__:PantallaSolicitudAF__" as Pantalla
control "__:GestorSolicitudAF__" as Gestor 

RA -->> Pantalla**: opcRegSolicitudAF()
Pantalla -> Pantalla: habilitarVentana()
Pantalla -->> Gestor**: nuevaSolicitud()

entity "__:MotivosAccesoForzado__" as Motivos #violet 
Gestor -> Gestor: buscarMotivos()
Gestor -> Motivos: *getNombre()

Gestor -> Pantalla: mostrarMotivosParaSeleccion()
RA -> Pantalla: tomarSeleccionMotivo()
Pantalla -> Gestor: tomarSeleccionMotivo()

Gestor -> Pantalla: pedirIngresoDNI()
RA -> Pantalla: tomarIngresoDNI()
Pantalla -> Gestor: tomarIngresoDNI()

entity "__:Cliente__" as Clientes #violet 
entity "__ingresado:Cliente__" as Cliente
entity "__:Contrato__" as Contratos #violet
Gestor -> Gestor: buscarClientePorDNI()
loop Titulares [mientras existan titulares]
    Gestor -> Clientes: esTuDNI()
    Clientes -> Clientes: getNombre()
    Clientes -> Clientes: getApellido()
    Clientes -> Contratos: poseeContrato()
    Contratos -> Cliente: sosTitular()
end
Gestor -> Pantalla: mostrarDatosCliente()
Gestor -> Pantalla: pedirConfirmacion()

RA->Pantalla: tomarConfirmacion()
Pantalla-> Gestor: tomarConfirmacion()


Gestor -> Gestor: buscarContratosVigentes()
Gestor-> Cliente: buscarContratosVigentes()
entity ":__CambioEstado__" as CE #violet
entity "__actual:CambioEstado__" as actualCE 
entity "__:Estado__" as E 

entity "__:CajaDeSeguridad__" as Cajas #violet
loop Contratos [mientras existan contratos]
    Cliente -> Contratos: estaVigente()
    Contratos -> CE: *esActual()
    Contratos -> actualCE: esVigente()
    actualCE->E:esVigente()
    Contratos -> Cliente: sosTitular()
    Contratos -> Contratos: getNroContrato()
    Contratos -> Contratos: getFechaVigencia()
    Contratos -> Cajas: getNroCajaSeguridad()
end

Gestor -> Pantalla: mostrarContratosParaSeleccion()
RA-> Pantalla: tomarSeleccionContratos()
Pantalla->Gestor: tomarSeleccionContratos()

Gestor->Pantalla:pedirConfirmacion()
RA->Pantalla:tomarConfirmacion()
Pantalla->Gestor:tomarConfirmacion()


Gestor -> Gestor: tomarFechaHoraActual()
Gestor -> Gestor: buscarEstadoConAccesoForzadoParaContrato()
entity "__:Estado__" as Estados #violet 
Gestor -> Estados: *esAmbitoContratos()
Gestor -> Estados: *esConAccesoForzado()

Gestor -> Gestor: buscarEstadoConAccesoForzadoParaCajaDeSeguridad()
Gestor -> Estados: *esAmbitoCajaSeguridad()
Gestor -> Estados: *esConAccesoForzado()

entity "__:Sesion__" as Sesion 
entity "__:Usuario__" as Usuario 
entity "__:Responsable__" as Responsable 

Gestor -> Gestor: buscarUsuarioLogueado()
Gestor -> Sesion: obtenerUsuarioLogueado()
Sesion -> Usuario: conocerResponsable()
Usuario -> Responsable: getNombre()

entity "__nueva:SolicitudDeAccesoForzado__" as Solicitud
loop por cada contrato seleccionado [mientras existan contratos seleccionados]
    Gestor -> Gestor: crearSolicitudAF()
    Gestor -->> Solicitud**: new()
    Gestor -> Contratos: forzarAcceso()
    Contratos -> actualCE: setFechaHoraFin()
    Contratos -> Contratos: crearCambioEstado()
    entity "__nuevo:CambioEstado__" as newCE 
    Contratos -->> newCE**: new()

    Gestor -> Gestor: forzarAccesoCajaSeguridad()
    Gestor -> Contratos: forzarAccesoCajaSeguridad()
    entity "__:CajaDeSeguridad__" as CajaSeguridad
    Contratos -> CajaSeguridad: forzarAcceso()
    CajaSeguridad -> CajaSeguridad: setEstadoActual()
end 

Gestor -> Gestor: finCU()
@enduml