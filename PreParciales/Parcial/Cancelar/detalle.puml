@startuml detalle 
autonumber
actor "__:Responsable Administracion__" as RA 

boundary "__:PantallaCancelarContrato__" as PCC 

control "__:ControladorCancelarContrato__" as CCC 


RA --> PCC : opcCancelarContrato()
PCC --> PCC : abrirVentana()
PCC --> CCC : nuevaCancelacion()

CCC --> PCC : pedirIngresoDNI()
RA --> PCC : tomarIngresoDNI()

PCC --> CCC : tomarIngresoDNI()
CCC --> CCC : buscarCliente()

entity "__:Cliente__" as C #Red
entity "__:DetalleContrato__" as DC #Red
entity "__:Contrato__" as Contrato #Red

CCC --> C : esTuDNI()*

CCC --> CCC : buscarContratoVigente()
entity "__EstadoContrato__" as EC 
group loop [Mientras haya contratos]
    CCC --> Contrato : esVigente()
    Contrato --> EC : esVigente()

    CCC --> Contrato : esCLiente()
    Contrato --> Contrato : buscarCliente()
    entity "__:Rol__" as R 
    group loop [Mientras haya detalles]
        Contrato --> DC : esCliente()
        DC --> C : esCLiente()
        DC --> R : esTitular()

        DC --> C : getDatos()
        C --> C : getApellido()
        C --> C : getNombre()
        C --> C : getDNI()
    end 
    CCC --> Contrato : getDatos()
    Contrato --> Contrato : getNumComprato()
    Contrato --> Contrato : getFechaInicio()
    Contrato --> Contrato : getFechaFin()
    Contrato --> Contrato : obtenerNumCaja()
    entity "__:CajaSeguridad__" as CS 
    Contrato --> CS : getNumCaja()
end
CCC --> CCC : ordenarFechaFinContratacion()

CCC --> PCC : pedirSeleccionContrato()
RA --> PCC : tomarSeleccionContrato()
PCC --> CCC : tomarSeleccionContrato()

CCC --> CCC : verificarCOndiciones()
entity "__:selec:COntrato__" as sC 
CCC --> sC : verificarSolicitudesCancelacion()
sC --> sC : verificarSolicitudes()
group loop [Mientras haya detalles]
    sC --> DC : esTitular()
    DC --> R : esTitular()
    sC --> DC : existeSolicitudCancelacion()
end

CCC --> CCC : verificarDeclaracionVaciamiento()
CCC --> sC : verificarDeclaracionVaciamiento()
sC --> CS : existeDeclaracionVaciamiento()

entity "__:MotivoCancelacion__" as MC #Red
CCC --> CCC : buscarMotivoCancelacion()
CCC --> MC : getNombre()*

CCC --> PCC : pedirConfirmacionCancelacion()
RA --> PCC : tomarCOnfirmacionCancelacion()
PCC --> CCC: tomarConfirmacionCancelacion()

entity "__:actual:Sesion__" as actualS
entity "__:log:Usuario__" as lU 
CCC --> CCC : buscarResponsableLogueado()
CCC --> actualS : buscarResponsableLogueado()
actualS --> lU : getResponsable()
entity "__:Estado__" as E #red
CCC --> CCC : buscarEstadoCancelado()
group loop [Mientras haya estados]
    CCC --> E : esAmbito()
    CCC --> E : esCancelado()
end
CCC --> CCC : buscarEstadoDisponible()
group loop [Mientras haya estados]
    CCC --> E : esAmbito()
    CCC --> E : esDisponible(()
end
CCC --> CCC : getFechaHoraActual()
entity "__:CambioEstado__" as CE #red
entity "__:actual:CambioEstado__" as aCE 
CCC --> CCC : buscarCambioEstadoActual()
CCC --> sC : buscarCambioEstadoActual()
sC --> sC : buscarEstado()
sC --> CE : esActual()*
CE --> aCE : setFechaHoraFIn()

CCC --> CCC : crearCambioEstado()
CCC --> sC : cancelar()

create entity "__:nuevo:CambioEstado__" as nCE
sC --> nCE : new()
sC --> sC : setEstado()
CCC --> CCC : actualizarCaja()
CCC --> sC : habilitar()
sC --> CS : setEstado()

CCC --> CCC : finCU()

@enduml