@startuml CU7 

actor "__:Organizador__" as O 
boundary "__:PantallaEvento__" as Pantalla 
control "__:GestorEvento__" as Gestor 

O -->> Pantalla**: opcionPublicarEvento()
Pantalla -> Pantalla: habilitarVentana()
Pantalla -->> Gestor**: nuevaPublicacionEvento()

entity "__actual:Sesion__" as Sesion 
Gestor -> Gestor: buscarUsuarioLogueado()
Gestor -> Sesion: buscarUsuarioLogueado()
entity "__log:Usuario__" as Usuario 
Sesion -> Usuario: getNombreUsuario()
entity "__:Organizador__" as Empleado #Coral
'Usuario -> Empleado: esTuUsuario() == mayor acoplamiento
entity "__logueado:Organizador__" as logEmpleado

Gestor -> Pantalla: mostrarNombreUsuarioLogueado()
Gestor -> logEmpleado: *esTuUsuario()


Gestor -> Gestor: buscarEventosListoParaPublicar()
Gestor -> logEmpleado: buscarEventosListoParaPublicardddddd()

entity "__:Evento__" as Evento #Coral 

entity "__:CambioEstado__" as CE1 #Coral
entity "__actual:CambioEstado__" as actualCE #Coral
entity "__:Estado__" as Estados #Coral 

loop Eventos Listos [mientras existan eventos]
    'obtiene el puntero a estado actual
    logEmpleado -> Evento: estaListoParaPublicar()
    Evento -> CE1: *esEstadoActual()
    CE1 -> Estados: esListoParaPublicar()
    Evento -> Evento: getDescripcion()
end

Gestor -> Pantalla: mostrarEventosListosParaPublicar()
Gestor -> Pantalla: pedirSeleccionEvento()
O -> Pantalla: tomarSeleccionEvento()
Pantalla -> Gestor: tomarSeleccionEvento()
entity "__selec:Evento__" as EventoSeleccionado 

Gestor -> Gestor: buscarDatosEvento()
Gestor -> logEmpleado: buscarDatosEvento()
logEmpleado ->EventoSeleccionado: mostrarDatos()

EventoSeleccionado -> EventoSeleccionado: getNombre()
EventoSeleccionado -> EventoSeleccionado: getDescripcion()
EventoSeleccionado -> EventoSeleccionado: getFoto()
EventoSeleccionado -> EventoSeleccionado: getUbicacion()
EventoSeleccionado -> EventoSeleccionado: getFechaInicio()
EventoSeleccionado -> EventoSeleccionado: getFechaFin()
entity "__:TipoEvento__" as TipoEvento
EventoSeleccionado -> TipoEvento: getNombre()
entity "__:Categoria__" as Categoria #Coral
EventoSeleccionado -> Categoria: *getNombre()
entity "__habilitados:MediosDePago__" as MP #Coral
EventoSeleccionado -> MP: *getNombre()
entity "__:TipoEntrada__" as TipoEntrada 

loop Entradas [mientras existan tipos]
    EventoSeleccionado -> TipoEntrada: getNombre()
    EventoSeleccionado -> TipoEntrada: getPrecio()
    'duda acá --- VA LOOP
    EventoSeleccionado -> TipoEntrada: esIndividual()
    EventoSeleccionado -> TipoEntrada: getCantidadMaxima()
    EventoSeleccionado -> TipoEntrada: getCantidadMinima()
end

Gestor -> Pantalla: pedirConfirmacionPublicacion()
O -> Pantalla: tomarConfirmacionPublicacion()
Pantalla -> Gestor: tomarConfirmacionPublicacion()

Gestor -> Gestor: generarURL()

Gestor -> Gestor: buscarEstadoPublicado()
'preguntar por ámbito
Gestor -> Estados: *esPublicado()

'entity "__:CambioEstado__" as CE #Coral
entity "__nuevo:CambioEstado__" as newCE 
Gestor-> Gestor: tomarFechaHoraActual()

Gestor -> Gestor: publicarEvento()
Gestor -> logEmpleado: publicar()
EventoSeleccionado -> EventoSeleccionado: setURL()
EventoSeleccionado -> EventoSeleccionado: crearCambioEEstado()
EventoSeleccionado -> actualCE: setFechaHoraFin()

EventoSeleccionado --> newCE**: new()



Gestor -> Gestor: finCU()







@enduml